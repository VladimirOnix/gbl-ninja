plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.20'
    id 'java'
    id 'jacoco'
    id 'application'
}

group = 'org.example'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    // Добавляем зависимость для JUnit 5, которая нам понадобится
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
}

tasks.withType(Test) {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        html.required = true
        // Добавляем CSV отчет если нужен для интеграции с другими инструментами
        csv.required = false
    }

    // Более детальная настройка исключений
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    // Исключаем сгенерированные Kotlin-классы
                    '**/*$*.*',
                    // Исключаем jdk/internal
                    'jdk/internal/**',
                    // Исключаем классы data
                    '**/data/**',
                    // Исключаем классы моделей
                    '**/models/**',
                    // Исключаем файлы конфигурации
                    '**/config/**'
            ])
        }))
    }
}

// Добавляем минимальные пороги покрытия
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport

    violationRules {
        rule {
            limit {
                minimum = 0.7 // 70% покрытия как минимум
            }
        }

        // Правила по конкретным пакетам
        rule {
            element = 'PACKAGE'
            includes = ['org.example.core.*']

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8 // 80% покрытия для ключевых пакетов
            }
        }
    }
}

kotlin {
    jvmToolchain(21)
}

application {
    mainClass = 'org.example.MainKt'
}

jar {
    manifest {
        attributes(
                'Main-Class': application.mainClass,
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('checkCoverage') {
    dependsOn jacocoTestCoverageVerification
    description = 'Runs tests and verifies code coverage'
    group = 'verification'
}

tasks.register('release') {
    dependsOn clean, jar, checkCoverage
    description = 'Cleans the project, verifies code coverage, and builds a release JAR'
    group = 'build'
}

build.dependsOn jar